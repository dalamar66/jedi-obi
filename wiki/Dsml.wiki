=*DSML*=

De nos jours, les services d’annuaire et XML constituent les fondements d’une bonne gestion des données. Avec DSML (Directory Service Markup Language), langage standardisé semblable au XML pour représenter les informations hiérarchiques, les services d’annuaires peuvent bénéficier des avantages du XML. En effet les services d’annuaires permettent de stocker et gérer les données tandis que XML permet de présenter et d’échanger les données. Ainsi le DSML permet aux services d’annuaires d’être plus dynamiques en intégrant du XML.

Un document DSML peut décrire les entrées d’une structure hiérarchique (comme les bases LDAP), ou la structure hiérarchique elle-même, ou les deux à la fois.
La balise racine est `<DSML>` et ses enfants peuvent être `<DIRECTORY-ENTRIES>` si c’est la représentation des entrées de la base, ou `<DIRECTORY-SCHEMA>` si c’est la représentation du schéma de la base LDAP.

{{{
<DSML>
<DIRECTORY-SCHEMA>
…
</DIRECTORY-SCHEMA>
<DIRECTORY-ENTRIES >
…
</DIRECTORY-ENTRIES>
</DSML>
}}}

Les nœuds `<DIRECTORY-ENTRIES>` peuvent contenir les informations de la classe d’objets ainsi que les informations sur les attributs comme ci-dessous :

{{{
<DSML>
<DIRECTORY-ENTRIES>
    <ENTRY DN= « OU=HUMEAU Xavier, DC=Personnes, DC=societe, DC=com »>
<OBJECTCLASS>
<OC-VALUE>top</OC-VALUE>
<OC-VALUE>organizationalUnit</OC-VALUE>
</OBJECTCLASS>
<ATTR  NAME= « otherMail » >
<VALUE>xhumeau@gmail.com</VALUE>
</ATTR>
<ATTR NAME= « OID » >
	<VALUE ENCODING= “base64”>MIICJ+6K…<VALUE>
</ATTR>
    </ENTRY>
</DIRECTORY-ENTRIES>
</DSML>

}}}

===Fichier de configuration===

{{{
com.byconst.ref.dsml.directoryserver   = ldap://256.256.256.256
com.byconst.ref.dsml.directoryserver   = ldap://societe.domaine.com

com.byconst.ref.dsml.directorypassword = xxx

com.byconst.ref.dsml.directoryrootpath = OU=Comptes,DC=societe,DC=domaine,DC=com

com.byconst.ref.dsml.directoryuser     = cn=Administrateur,cn=Users,DC=societe,DC=domaine,DC=com

com.byconst.ref.dsml.filter            = (&(ou=mar*))

com.ldap.dsml.attributerequired        = cn,sn,givenName
}}}

===Export===

{{{
PATH = %PATH%;c:\jdk1.5\bin

@echo off
echo.
echo Usage : export [chemin / fichier de properties] [chemin / fichier xml]
echo.
echo [chemin / fichier de properties] : Fichier de configuration
echo [chemin / fichier xml]           : Fichier de destination
echo.
java.exe -Xms512m -Xmx512m -classpath jedi-obi.jar com.ldap.dsml.ExportDsml %1 %2
}}}

===Import===

{{{
PATH = %PATH%;c:\jdk1.5\bin

@echo off
echo.
echo Usage : export [chemin / fichier de properties] [chemin / fichier xml]
echo.
echo [chemin / fichier de properties] : Fichier de configuration
echo [chemin / fichier xml]           : Fichier source
echo.
java.exe -Xms512m -Xmx512m -classpath jedi-obi.jar com.ldap.dsml.ImportDsml %1 %2
}}}

===Differentiel===

{{{
PATH = %PATH%;c:\jdk1.5\bin

@echo off
echo.
echo Usage : diff [chemin / fichier xml] [chemin / fichier xml] [entry/attr/all] [chemin / fichier xml]
echo.
echo [chemin / fichier xml] : Fichier XML de référence
echo [chemin / fichier xml] : Fichier XML à comparer
echo [entry]           	    : Les nouveaux elements du modele sont extraits
echo [attr]                 : Seul les attributs sont traites
echo [all]		    : Les deux cas precedents sont appliqués
echo [chemin / fichier xml] : Fichier XML notifiant les différences
echo.
java.exe -Xms512m -Xmx512m -classpath jedi-obi.jar com.ldap.dsml.DiffDsml %1 %2 %3 %4
}}}